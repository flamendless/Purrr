local BaseState = require("base.state")
local Menu = BaseState("Menu")

local flux = require("modules.flux.flux")
local vec2 = require("modules.hump.vector")
local lume = require("modules.lume.lume")

local Instance = require("modules.concord.lib.instance")
local Entity = require("modules.concord.lib.entity")
local E = require("ecs.entities")
local C = require("ecs.components")
local S = require("ecs.systems")

local bgm = require("src.bgm")
local config = require("src.config")
local transition = require("src.transition")
local colors = require("src.colors")
local screen = require("src.screen")
local resourceManager = require("src.resource_manager")
local gamestate = require("src.gamestate")
local assets = require("src.assets")
local utils = require("src.utils")
local gui_manager = require("src.gui_manager")

local base_gui_button = require("base.gui_button")
local base_gui_window = require("base.gui_window")

local next_state

function Menu:enter(previous, ...)
	self.images = resourceManager:getAll("images")
	self.sources = resourceManager:getAll("sources")
	self.fonts = resourceManager:getAll("fonts")
	self.instance = Instance()
	self:setBackground(self.images.bg)
	self:setupSystems()
	self:setupEntities()
	self:setupGUI()
	self:start()

	bgm:start(self.sources.bgm_menu, "Menu")
end

function Menu:setupGUI()
	local btn_start = base_gui_button("btn_start")
	btn_start:setTexture(self.images.btn_start)
	btn_start:setTextureOnHover(self.images.btn_start_hovered)
	btn_start:setPosition(screen.x/2, screen.y * 1.5)
	btn_start:setScale(3, 3)
	btn_start:setOffset(self.images.btn_start:getWidth()/2, self.images.btn_start:getHeight()/2)
	btn_start:setOnClick(function(mx, my, mb)
		if config.data.flags.customization_done then
			next_state = require("states").customization
		else
			next_state = require("states").lobby
		end
		gamestate:switch(next_state)
	end)
	btn_start:calculate()

	local btn_leave = base_gui_button("btn_leave")
	btn_leave:setTexture(self.images.btn_leave)
	btn_leave:setTextureOnHover(self.images.btn_leave_hovered)
	btn_leave:setPosition(screen.x/2, screen.y * 1.5)
	btn_leave:setScale(2, 2)
	btn_leave:setOffset(self.images.btn_leave:getWidth()/2, self.images.btn_leave:getHeight()/2)
	btn_leave:setOnClick(function(mx, my, mb)
		!if _PLATFORM == "desktop" then
		!if _DEBUG then
		love.event.quit()
		!else --ELSE DEBUG
		local title = "Confirm"
		local message = "Are you sure you want to close the game?"
		local buttons = { "Yes", "No", escapebutton = 2 }
		local w = love.window.showMessageBox(title, message, buttons)
		if w == 1 then
			love.event.quit()
		elseif w == 2 then
		end
		!end --END DEBUG
		!else --ELSE PLATFORM
		!end --END PLATFORM
	end)
	btn_leave:calculate()

	local btn_settings = base_gui_button("btn_settings")
	btn_settings:setTexture(self.images.btn_settings)
	btn_settings:setTextureOnHover(self.images.btn_settings_hovered)
	btn_settings:setPosition(screen.x - 32, screen.y * 1.5)
	btn_settings:setScale(2, 2)
	btn_settings:setOffset(self.images.btn_settings:getWidth(), self.images.btn_settings:getHeight())
	btn_settings:setOnClick(function(mx, my, mb)
	end)
	btn_settings:calculate()

	gui_manager:addButton(btn_start)
	gui_manager:addButton(btn_leave)
	gui_manager:addButton(btn_settings)

	local window_img = self.images[utils:randomSuffixRange("window_settings", 1, 4)]
	local window_settings = base_gui_window("window_settings")
	window_settings:setTexture(window_img)
	window_settings:setPosition(screen.x/2, screen.y/2)
	window_settings:setOffset(window_img:getWidth()/2, window_img:getHeight()/2)
	window_settings:setScale(2, 2)

	gui_manager:addWindow(window_settings)
end

function Menu:setupSystems()
	self.systems = {
		renderer_sprite = S.renderer.sprite(),
	}
	self.instance:addSystem(self.systems.renderer_sprite, "draw")
	!if _DEBUG then
	self.systems.collider = S.collider()
	self.instance:addSystem(self.systems.collider, "draw")
	self.instance:addSystem(self.systems.collider, "mousepressed")
	!end
end

function Menu:setupEntities()
	self.entities = {}
	self.entities.title = Entity()
		:give(C.tag, "title")
		:give(C.color)
		:give(C.sprite, self.images.title)
		:give(C.transform, vec2(screen.x/2, -screen.y/2), 0, 1, 1, self.images.title:getWidth()/2, self.images.title:getHeight()/2)
		!if _DEBUG then
		:give(C.collider_sprite)
		!end
		:apply()
	self.instance:addEntity(self.entities.title)
end

function Menu:start()
	local title_y = self.entities.title[C.transform].oy + 32
	flux.to(self.entities.title[C.transform].pos, 1, { y = title_y }):ease("backout")

	local btn_start = gui_manager:getButton("btn_start")
	local btn_leave = gui_manager:getButton("btn_leave")
	local btn_settings = gui_manager:getButton("btn_settings")

	local btn_start_y = btn_start:getOffset().y + 455
	local btn_leave_y = btn_leave:getOffset().y + 620
	local btn_settings_y = screen.y - screen.pad

	flux.to(btn_start:getPosition(), 1, { y = btn_start_y }):ease("backout")
	flux.to(btn_leave:getPosition(), 1, { y = btn_leave_y }):ease("backout")
	flux.to(btn_settings:getPosition(), 1, { y = btn_settings_y }):ease("backout")
end

function Menu:update(dt)
	self.instance:emit("update", dt)
end

function Menu:draw()
	self:drawBackground()
	self.instance:emit("draw")
end

function Menu:keypressed(key)
	self.instance:emit("keypressed", key)
end

function Menu:mousepressed(mx, my, mb)
	self.instance:emit("mousepressed", mx, my, mb)
end

!if _PLATFORM == "mobile" then
function Menu:touchpressed(id, tx, ty, dx, dy, pressure)
	self.instance:emit("touchpressed", id, tx, ty, dx, dy, pressure)
end
!end

function Menu:exit()
	bgm:clear()
	if self.instance then self.instance:clear() end
	gui_manager:flushButtons()
end

return Menu
