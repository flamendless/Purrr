local class = require("modules.classic.classic")
local vec2 = require("modules.hump.vector")
local utils = require("src.utils")

!if _LOGGING then
local log = require("modules.log.log")
!end

local BaseGUIWindow = class:extend()

--local style = "overlay"
local style = "opaque"

function BaseGUIWindow:new(id)
	self.__id = id or "?gui_window"
	self.__isGUIWindow = true
	self.__layer = 0
	self.__img = nil
	self.__isHovered = false
	self.__onHover = nil
	self.__onClick = nil
	self.__pos = nil
	self.__rot = 0
	self.__size = vec2()
	self.__offset = vec2()
	self.__scale = vec2(1, 1)
	self.__orig_pos = nil
	self.__orig_rot = 0
	self.__orig_scale = vec2(1, 1)
	self.__orig_offset = vec2()
	self.__orig_size = nil
	self.__children = {}

	!if _logging then
	log.info("created gui window: " .. self.__id)
	!end
end

function BaseGUIWindow:saveTransformation()
	self.__orig_pos = self.__pos:clone()
	self.__orig_rot = self.__rot
	self.__orig_scale = self.__scale:clone()
	self.__orig_offset = self.__offset:clone()
end

function BaseGUIWindow:setTexture(img)
	assert(img:type() == "Image", "arg1 must be an image")
	self.__img = img
	self.__orig_size = vec2(img:getWidth(), img:getHeight())
end

function BaseGUIWindow:setPosition(x, y)
	self.__pos = vec2(x or 0, y or 0)
end

function BaseGUIWindow:setRotation(rot)
	self.__rot = rot or 0
end

function BaseGUIWindow:setScale(sx, sy)
	self.__scale = vec2(sx or 1, sy or 1)
end

function BaseGUIWindow:setOffset(ox, oy)
	self.__offset = vec2(ox or 0, oy or 0)
end

function BaseGUIWindow:setLayer(layer)
	assert(type(layer) == "number", "arg1 must be a number")
	self.__layer = layer
end

function BaseGUIWindow:setOnHover(fn)
	assert(type(fn) == "function", "arg1 must be a function")
	self.__onHover = fn
end

function BaseGUIWindow:setOnClick(fn)
	assert(type(fn) == "function", "arg1 must be a function")
	self.__onClick = fn
end

function BaseGUIWindow:addChild(child)
end

function BaseGUIWindow:getID()
	return self.__id
end

function BaseGUIWindow:getLayer()
	return self.__layer
end

function BaseGUIWindow:getPosition()
	return self.__pos
end

function BaseGUIWindow:getScale()
	return self.__scale
end

function BaseGUIWindow:getOffset()
	return self.__offset
end

function BaseGUIWindow:getSize()
	return self.__size
end

function BaseGUIWindow:getOriginalSize()
	return self.__orig_size
end

function BaseGUIWindow:calculate()
	self.__size.x = self.__img:getWidth() * self.__scale.x
	self.__size.y = self.__img:getHeight() * self.__scale.y
end

function BaseGUIWindow:checkOnMouseCollision()
	local x = self.__pos.x - self.__offset.x * self.__scale.x
	local y = self.__pos.y - self.__offset.y * self.__scale.y
	local w = self.__orig_size.x * self.__scale.x
	local h = self.__orig_size.y * self.__scale.y
	local mx, my = love.mouse.getPosition()
	local check = utils:pointToRectCheck(mx, my, x, y, w, h)
	if check then
		self.__isHovered = true
		if self.__onHover then
			self.__onHover()
		end
	else
		self.__isHovered = false
	end
end

function BaseGUIWindow:mousepressed(mx, my, mb)
	if self.__isHovered then
		if mb == 1 and self.__onClick then
			self.__onClick(mx, my, mb)
		end
		return true
	end
	return false
end

function BaseGUIWindow:update(dt)
	for _, child in ipairs(self.__children) do
		child:update(dt)
	end
end

function BaseGUIWindow:draw()
	if self.__visible == false then
		return
	end
	local img = self.__img
	local x = self.__pos.x
	local y = self.__pos.y
	local rot = self.__rot
	local sx = self.__scale.x
	local sy = self.__scale.y
	local ox = self.__offset.x
	local oy = self.__offset.y
	if style == "overlay" then
		local alpha = 0.75
		love.graphics.setColor(0, 0, 0, alpha)
		love.graphics.rectangle("fill", 0, 0, love.graphics.getWidth(), love.graphics.getHeight())
		love.graphics.setColor(1, 1, 1, 1)
	elseif style == "opaque" then
		local alpha = 1 - (0.1 * (self.__layer - 1))
		love.graphics.setColor(1, 1, 1, alpha)
	end
	love.graphics.draw(img, x, y, rot, sx, sy, ox, oy)
	for _, child in ipairs(self.__children) do
		child:draw()
	end
	love.graphics.setColor(1, 1, 1, 1)

	!if _DEBUG then
	local x = self.__pos.x - self.__offset.x * self.__scale.x
	local y = self.__pos.y - self.__offset.y * self.__scale.y
	local w = self.__orig_size.x * self.__scale.x
	local h = self.__orig_size.y * self.__scale.y
	love.graphics.setColor(1, 0, 0, 1)
	love.graphics.rectangle("line", x, y, w, h)
	love.graphics.setColor(1, 1, 1, 1)
	!end
end

!if _DEBUG then
local rad = math.rad
local rad_360 = rad(360)
function BaseGUIWindow:debug()
	imgui.SetNextTreeNodeOpen(true)
	if imgui.TreeNode("ID: " .. self.__id) then
		local x, status_x = imgui.SliderInt("x", self.__pos.x, 0, love.graphics.getWidth())
		imgui.SameLine()
		if imgui.SmallButton("copy##x") then love.system.setClipboardText(x) Log("copied to clipboard: " .. x) end

		local y, status_y = imgui.SliderInt("y", self.__pos.y, 0, love.graphics.getHeight())
		imgui.SameLine()
		if imgui.SmallButton("copy##y") then love.system.setClipboardText(y) Log("copied to clipboard: " .. y) end

		local rotation, status_rotation = imgui.SliderInt("rot", self.__rot, 0, rad_360)
		imgui.SameLine()
		if imgui.SmallButton("copy##rot") then love.system.setClipboardText(rot) Log("copied to clipboard: " .. rot) end

		local sx, status_sx = imgui.SliderInt("sx", self.__scale.x, 0, 10)
		imgui.SameLine()
		if imgui.SmallButton("copy##sx") then love.system.setClipboardText(sx) Log("copied to clipboard: " .. sx) end

		local sy, status_sy = imgui.SliderInt("sy", self.__scale.y, 0, 10)
		imgui.SameLine()
		if imgui.SmallButton("copy##sy") then love.system.setClipboardText(sy) Log("copied to clipboard: " .. sy) end

		local ox, status_ox = imgui.SliderInt("ox", self.__offset.x, 0, self.__img:getWidth())
		imgui.SameLine()
		if imgui.SmallButton("copy##ox") then love.system.setClipboardText(ox) Log("copied to clipboard: " .. ox) end

		local oy, status_oy = imgui.SliderInt("oy", self.__offset.y, 0, self.__img:getHeight())
		imgui.SameLine()
		if imgui.SmallButton("copy##oy") then love.system.setClipboardText(oy) Log("copied to clipboard: " .. oy) end

		if imgui.Button("Reset") then
			self.__pos = self.__orig_pos:clone()
			self.__rot = self.__orig_rot
			self.__scale = self.__orig_scale:clone()
			self.__offset = self.__orig_offset:clone()
		end
		if status_x or status_y then
			self.__pos.x = x
			self.__pos.y = y
		end
		if status_rotation then self.__rot = rotation end
		if status_sx or status_sy then
			self.__scale.x = sx
			self.__scale.y = sy
		end
		if status_ox or status_oy then
			self.__offset.x = ox
			self.__offset.y = oy
		end
		imgui.TreePop()
	end
end
!end

return BaseGUIWindow
