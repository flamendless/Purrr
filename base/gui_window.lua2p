local vec2 = require("modules.hump.vector")
local utils = require("src.utils")

!if _LOGGING then
local log = require("modules.log.log")
!end

local base = require("base.gui")
local BaseGUIWindow = base:extend()

--local style = "overlay"
local style = "opaque"

function BaseGUIWindow:new(id)
	BaseGUIWindow.super.new(self, id or "?gui_window")
	self.__isGUIWindow = true
	self.__layer = 0
	self.__img = nil
	self.__isHovered = false
	self.__onHover = nil
	self.__onClick = nil
	self.__children = {}
	!if _logging then
	log.info("created gui window: " .. self.__id)
	!end
end

function BaseGUIWindow:setTexture(img)
	assert(img:type() == "Image", "arg1 must be an image")
	self.__img = img
	self.__orig_size = vec2(img:getWidth(), img:getHeight())
end

function BaseGUIWindow:setLayer(layer)
	assert(type(layer) == "number", "arg1 must be a number")
	self.__layer = layer
end

function BaseGUIWindow:setOnHover(fn)
	assert(type(fn) == "function", "arg1 must be a function")
	self.__onHover = fn
end

function BaseGUIWindow:setOnClick(fn)
	assert(type(fn) == "function", "arg1 must be a function")
	self.__onClick = fn
end

function BaseGUIWindow:addChild(child)
end

function BaseGUIWindow:getLayer()
	return self.__layer
end

function BaseGUIWindow:update(dt)
	for _, child in ipairs(self.__children) do
		child:update(dt)
	end
end

function BaseGUIWindow:draw()
	if self.__visible == false then return end

	local img = self.__img
	local x = self.__pos.x
	local y = self.__pos.y
	local rot = self.__rot
	local sx = self.__scale.x
	local sy = self.__scale.y
	local ox = self.__offset.x
	local oy = self.__offset.y
	if style == "overlay" then
		local alpha = 0.75
		love.graphics.setColor(0, 0, 0, alpha)
		love.graphics.rectangle("fill", 0, 0, love.graphics.getWidth(), love.graphics.getHeight())
		love.graphics.setColor(1, 1, 1, 1)
	elseif style == "opaque" then
		local alpha = 1 - (0.1 * (self.__layer - 1))
		love.graphics.setColor(1, 1, 1, alpha)
	end
	love.graphics.draw(img, x, y, rot, sx, sy, ox, oy)
	for _, child in ipairs(self.__children) do
		child:draw()
	end
	love.graphics.setColor(1, 1, 1, 1)

	!if _DEBUG then
	BaseGUIWindow.super.debugBounds(self)
	!end
end

return BaseGUIWindow
